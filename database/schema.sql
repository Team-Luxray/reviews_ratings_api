DROP DATABASE IF EXISTS reviews_api;
CREATE DATABASE reviews_api;
\c reviews_api;

DROP TABLE if exists reviews CASCADE;
DROP TABLE if exists reviews_photos CASCADE;
DROP TABLE if exists characteristics CASCADE;
DROP TABLE if exists characteristic_reviews CASCADE;
DROP TABLE if exists metadata CASCADE;

CREATE TABLE reviews (
  id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  product_id int not null,
  rating int not null,
  review_date bigint not null,
  summary varchar(200) not null,
  body varchar(1000) not null,
  recommend boolean not null default false,
  reported boolean not null default false,
  reviewer_name varchar(50) not null,
  reviewer_email varchar(50) not null,
  response varchar(200) ,
  helpfulness int not null default 0
);

CREATE TABLE reviews_photos (
  id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  review_id int references reviews(id),
  url varchar(300)
);

CREATE TABLE characteristics (
  id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  product_id int,
  name varchar (20)
);

CREATE TABLE characteristic_reviews (
  id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  characteristic_id int references characteristics(id),
  review_id int references reviews(id),
  value int
);

-- insert csv data into tables
COPY reviews (id, product_id, rating, review_date, summary, body, recommend, reported, reviewer_name, reviewer_email, response, helpfulness)
FROM '/Users/kevinkimchii/Documents/hackreactor/hrlax49/SDC/data/reviews.csv'
DELIMITER ','
CSV HEADER;

COPY reviews_photos (id, review_id, url)
FROM '/Users/kevinkimchii/Documents/hackreactor/hrlax49/SDC/data/reviews_photos.csv'
DELIMITER ','
CSV HEADER;

COPY characteristics (id, product_id, name)
FROM '/Users/kevinkimchii/Documents/hackreactor/hrlax49/SDC/data/characteristics.csv'
DELIMITER ','
CSV HEADER;

COPY characteristic_reviews (id, characteristic_id, review_id, value)
FROM '/Users/kevinkimchii/Documents/hackreactor/hrlax49/SDC/data/characteristic_reviews.csv'
DELIMITER ','
CSV HEADER;

-- create indexes on tables
CREATE INDEX reviews_index ON reviews(product_id);
CREATE INDEX reviews_photos_index ON reviews_photos(review_id);
CREATE INDEX characteristics_index ON characteristics(product_id);
CREATE INDEX characteristic_reviews_index ON characteristic_reviews(characteristic_id);

-- Added metadata table
-- Stores the value of the ratings from the reviews, count for recommendations (true, false)
-- Avoids building a JSON object to return each time metadata is requested
-- Instant look-up for metadata on a specific product
CREATE TABLE metadata (
  product_id int GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  true_count int default 0,
  false_count int default 0,
  one_star_rating int default 0,
  two_star_rating int default 0,
  three_star_rating int default 0,
  four_star_rating int default 0,
  five_star_rating int default 0
);

-- make the primary key the product_id as each product_id is unique
INSERT INTO metadata(product_id) SELECT DISTINCT product_id FROM reviews;

-- set the counts in metadata table
UPDATE metadata SET true_count = count
FROM (
  SELECT product_id, COUNT(recommend)
  FROM reviews
  WHERE recommend = true
  GROUP BY product_id
)
AS trueCount
WHERE metadata.product_id = trueCount.product_id;

UPDATE metadata SET false_count = count FROM (
  SELECT product_id, COUNT(recommend) FROM reviews
  WHERE recommend = false
  GROUP BY product_id
) AS falseCount
WHERE metadata.product_id = falseCount.product_id;

UPDATE metadata SET one_star_rating = count FROM (
  SELECT product_id, COUNT(rating) FROM reviews
  WHERE rating = 1
  GROUP BY product_id
) AS oneStar
WHERE metadata.product_id = oneStar.product_id;

UPDATE metadata SET two_star_rating = count FROM (
  SELECT product_id, COUNT(rating) FROM reviews
  WHERE rating = 2
  GROUP BY product_id
) AS twoStar
WHERE metadata.product_id = twoStar.product_id;

UPDATE metadata SET three_star_rating = count FROM (
  SELECT product_id, COUNT(rating) FROM reviews
  WHERE rating = 3
  GROUP BY product_id
) AS threeStar
WHERE metadata.product_id = threeStar.product_id;

UPDATE metadata SET four_star_rating = count FROM (
  SELECT product_id, COUNT(rating) FROM reviews
  WHERE rating = 4
  GROUP BY product_id
) AS fourStar
WHERE metadata.product_id = fourStar.product_id;

UPDATE metadata SET five_star_rating = count FROM (
  SELECT product_id, COUNT(rating) FROM reviews
  WHERE rating = 5
  GROUP BY product_id
) AS fiveStar
WHERE metadata.product_id = fiveStar.product_id;

SELECT setval(pg_get_serial_sequence('reviews', 'id'), (SELECT MAX(id) FROM reviews)+1);
SELECT setval(pg_get_serial_sequence('reviews_photos', 'id'), (SELECT MAX(id) FROM reviews_photos)+1);
SELECT setval(pg_get_serial_sequence('characteristic_reviews', 'id'), (SELECT MAX(id) FROM characteristic_reviews)+1);


-- create separate table for characteristic names and ids
-- characteristic names repeat in characteristics table
CREATE TABLE char_names_ids (
  characteristics_id integer GENERATED BY DEFAULT AS IDENTITY UNIQUE PRIMARY KEY,
  characteristic_name varchar(20) NOT NULL
)

INSERT INTO char_names_ids(characteristic_name) SELECT DISTINCT name FROM characteristics;
ALTER TABLE characteristics ADD COLUMN characteristic_id int;
UPDATE characteristics
SET characteristic_id=characteristics_id
FROM char_names_ids
WHERE characteristics.name = char_names_ids.characteristic_name;

ALTER TABLE characteristics ADD COLUMN sum_votes int;
ALTER TABLE characteristics ADD COLUMN sum_rating int;
UPDATE characteristics SET sum_votes = total.votes, sum_rating = total.rating
FROM (
  SELECT characteristic_id, COUNT(votes) as votes, SUM(score) as score
  FROM characteristics
  GROUP BY characteristic_id
  ) total
WHERE characteristics.id = total.characteristic_id;